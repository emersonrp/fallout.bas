1 REM vim: ft=basic10 CLEAR 2048 : RANDOM20 GUESSES% = 4: MAXGUESSES% = 425 DIFFICULTY% = 1: ' TODO set this up via startup UI of some kind30 GOSUB 60000: ' Populate the word list40 WORDLENGTH% = LEN(WORDS$(1))50 PASSWORDIDX% = RND(WORDLISTLENGTH%)60 PASSWORD$ = WORDS$(PASSWORDIDX%)70 CURWORD% = 080 DIM OUTPUTLINES$(15): ' 15 lines because the bottom one we always do dynamically90 DIM PAPOSITIONS%(WORDLISTLENGTH%,WORDLENGTH%): ' (number of words, length)100 DIM LWORDTOPOS%(WORDLISTLENGTH%, WORDLENGTH%), RWORDTOPOS%(WORDLISTLENGTH%, WORDLENGTH%)110 DIM LPOSTOWORD%(12*16), RPOSTOWORD%(12*16)120 HEXADDRESS! = RND(32767-4096) + RND(32767) + 4096: IF HEXADDRESS! > 32767 THEN HEXADDRESS! = HEXADDRESS! - 65536!130 GUESSISNUGGET% = 0140 DUD$ = STRING$(WORDLENGTH%, ".")500 CLS510 PRINT520 PRINT "Welcome to ROBCO Industries (TM) Termlink"530 PRINT540 PRINT "Password Required"550 PRINT560 PRINT CHR$(16); " "; CHR$(17); CHR$(24);1000 REM ===== set up the vars representing the left and right text fields1010 REM GARBAGECHARS$ contains double of most things to make []{}()<> less likely1020 GARBAGECHARS$ =  "/\%@#$%^*-=+,.:;?_/\%@#$%^*-=+,.:;?_[]{}()<>"1050 FOR I = 1 TO 501060   NEWCHAR$ = MID$(GARBAGECHARS$, RND(LEN(GARBAGECHARS$)), 1)1070   IF NEWCHAR$ = LASTLCHAR$ THEN 1060 ELSE LASTLCHAR$ = NEWCHAR$1080   LSIDE$ = LSIDE$ + NEWCHAR$1090 NEXT1100 LSIDE$ = LSIDE$ + LSIDE$ + LSIDE$ + LEFT$(LSIDE$, 42)1110 RSIDE$ = RIGHT$(LSIDE$, 32) + LEFT$(LSIDE$, 160)1300 REM ===== add nuggets explicitly, just sprinkle some of them in there and let them land where they may.1310 NUGGSIDE% = 01320 FOR I = 13 TO 11*16 STEP 161330   I = I + RND(11) - 5: ' randomize locations a little1340   NUGGIDX% = RND(4)1350   NEWNUGGET$ = MID$("[{<(",NUGGIDX%,1) + MID$(LSIDE$, RND(LEN(LSIDE$)), RND(5)-1) + MID$("]}>)",NUGGIDX%,1)1360   IF NUGGSIDE% = 0 THEN MID$(LSIDE$, I, LEN(NEWNUGGET$)) = NEWNUGGET$ ELSE MID$(RSIDE$, I, LEN(NEWNUGGET$)) = NEWNUGGET$1370   NUGGSIDE% = 1 - NUGGSIDE%1380 NEXT I1500 REM ===== sprinkle the words into the text fields1510 DIM LSIDEPOS%(WORDLISTLENGTH%), RSIDEPOS%(WORDLISTLENGTH%)1520 TRIES% = 01530 FOR I = 1 TO WORDLISTLENGTH%1540   TRIES% = TRIES% + 1: IF TRIES% > 100 THEN PRINT:PRINT:PRINT "RANDOMIZER RAN OUT OF PATIENCE FITTING WORDS INTO FIELDS.  THIS IS SORT OF A BUG.":END1550   TESTPOS% = RND(12*16 - WORDLISTLENGTH%)1560   ON RND(2) GOTO 1570,1700: ' randomly pick right or left side1570   REM Left side1580   IF LPOSTOWORD%(TESTPOS%) > 0 THEN 1540: ' overlaps or abuts another word on the left1590   IF TESTPOS% > 1 THEN IF LPOSTOWORD%(TESTPOS%-1) > 0 THEN 1540: ' too close to another word on the left1600   IF LPOSTOWORD%(TESTPOS%+WORDLENGTH%) > 0 THEN 1540: ' overlaps or abuts another word on the right1610   IF TESTPOS% < WORDLENGTH% THEN IF LPOSTOWORD%(TESTPOS%+WORDLENGTH%+1) > 0 THEN 1540: ' too close to another word on the right1620   LSIDEPOS%(I) = TESTPOS%1630   FOR J = 1 TO WORDLENGTH%1640     LPOSTOWORD%(LSIDEPOS%(I)+J-1) = I1650     LWORDTOPOS%(I, J) = LSIDEPOS%(I)+J-11660     MID$(LSIDE$, LSIDEPOS%(I)+J-1) = MID$(WORDS$(I),J,1): ' do this in here because enhcomp demands it1670   NEXT J1680   GOSUB 410001690   GOTO 18201700   REM Right side1710   IF RPOSTOWORD%(TESTPOS%) > 0 THEN 1540: ' too close to another word on the left1720   IF TESTPOS% > 1 THEN IF RPOSTOWORD%(TESTPOS%-1) > 0 THEN 1540: ' too close to another word on the left1730   IF RPOSTOWORD%(TESTPOS%+WORDLENGTH%) > 0 THEN 1540: ' too close to another word on the right1740   IF TESTPOS% < WORDLENGTH% THEN IF RPOSTOWORD%(TESTPOS%+WORDLENGTH%+1) > 0 THEN 1540: ' too close to another word on the right1750   RSIDEPOS%(I) = TESTPOS%1760   FOR J = 1 TO WORDLENGTH%1770     RPOSTOWORD%(RSIDEPOS%(I)+J-1) = I1780     RWORDTOPOS%(I, J) = RSIDEPOS%(I)+J-11790     MID$(RSIDE$, RSIDEPOS%(I)+J-1) = MID$(WORDS$(I),J,1): ' do this in here because enhcomp demands it1800   NEXT J1810   GOSUB 420001820 NEXT I10000 REM ===== print the text fields at the right place10005 PRINT @ 400, " ";10010 TOPROW = 710020 FOR I = 0 TO 1510030   PALOC = (TOPROW + I) * 8010040   PRINT @ PALOC, "0x" ; HEX$(HEXADDRESS!) ; " " ; MID$(LSIDE$, I*12 + 1, 12) ; " 0x" ; HEX$(HEXADDRESS! + (12*16)) ; " " ; MID$(RSIDE$, I*12 + 1, 12);10050   HEXADDRESS! = HEXADDRESS! + 1210060 NEXT I10070 GOSUB 47000: ' print attempts remaining10080 GOSUB 49040: ' print the prompt20000 REM ===== Set up the initial cursor location20010 CURX% = 1: CURY% = 1: CURSIDE% = 0: ' CURSIDE% 0 = LEFT, 1 = RIGHT20020 GOSUB 4000021000 REM ===== Do the input loop and dispatch appropriately21010 KEYIN$ = INKEY$: IF KEYIN$ = "" THEN 2101021020 IF KEYIN$ = CHR$(8)  THEN GOSUB 40700: GOTO 21010 ELSE IF KEYIN$ = "h" THEN GOSUB 40700: GOTO 2101021030 IF KEYIN$ = CHR$(9)  THEN GOSUB 40800: GOTO 21010 ELSE IF KEYIN$ = "l" THEN GOSUB 40800: GOTO 2101021040 IF KEYIN$ = CHR$(10) THEN GOSUB 40500: GOTO 21010 ELSE IF KEYIN$ = "j" THEN GOSUB 40500: GOTO 2101021050 IF KEYIN$ = CHR$(11) THEN GOSUB 40600: GOTO 21010 ELSE IF KEYIN$ = "k" THEN GOSUB 40600: GOTO 2101021060 IF KEYIN$ = CHR$(13) THEN IF GUESSISNUGGET% = 1 THEN GOSUB 51000 ELSE IF CURWORD% > 0 THEN GOSUB 50000 ELSE IF CURWORD% = -1 THEN GOSUB 5150021070 IF KEYIN$ = " " THEN IF GUESSISNUGGET% = 1 THEN GOSUB 51000 ELSE IF CURWORD% > 0 THEN GOSUB 50000 ELSE IF CURWORD% = -1 THEN GOSUB 5150021999 GOTO 2101039999 END40000 REM ===== sub to DTRT with the current cursor location40003 REM print our current thingie before we change around where CURPALOC points40005 IF GUESSISNUGGET% = 1 THEN PRINT @ CURPALOC%, GUESS$;: GUESSISNUGGET% = 0 ELSE PRINT @ CURPALOC%, CURCHAR$;40007 IF CURWORD% > 0 THEN GOSUB 44000: CURWORD% = 040010 CURFIELDPOS% = (CURY%-1) * 12 + CURX%40020 IF CURSIDE% = 0 THEN CURPALOC% = (CURY%+6)*80 + 6 + CURX% ELSE CURPALOC% = (CURY%+6)*80 + 26 + CURX%40030 IF CURSIDE% = 0 THEN CURCHAR$ = MID$(LSIDE$, CURFIELDPOS%, 1) ELSE CURCHAR$ = MID$(RSIDE$, CURFIELDPOS%, 1)40040 IF CURCHAR$ = "{" THEN ENDCHAR$ = "}": GOSUB 46000: RETURN40050 IF CURCHAR$ = "[" THEN ENDCHAR$ = "]": GOSUB 46000: RETURN40060 IF CURCHAR$ = "<" THEN ENDCHAR$ = ">": GOSUB 46000: RETURN40070 IF CURCHAR$ = "(" THEN ENDCHAR$ = ")": GOSUB 46000: RETURN40080 IF ASC(CURCHAR$) < 65 THEN GOSUB 45000: RETURN ELSE IF ASC(CURCHAR$) > 90 THEN GOSUB 45000: RETURN40090 IF CURSIDE% = 0 THEN CHECKWORD% = LPOSTOWORD%(CURFIELDPOS%) ELSE CHECKWORD% = RPOSTOWORD%(CURFIELDPOS%)40100 IF CHECKWORD% <> 0 THEN CURWORD% = CHECKWORD%: IF WORDS$(CHECKWORD%) <> DUD$ THEN GOSUB 44000: GOSUB 43000 ELSE GOSUB 4500040110 RETURN40200 REM ===== SET CURY and CURX from CURFIELDPOS - this is for exiting a word to the right or left40210 CURY% = INT(CURFIELDPOS% / 12) + 140220 CURX% = CURFIELDPOS% - ((CURY%-1) * 12)40230 IF CURX% = 0 THEN CURX% = 12: CURY% = CURY% - 140240 RETURN40500 REM ===== handle "cursor down"40510 IF CURY% < 16 THEN CURY% = CURY% + 140520 GOSUB 4000040530 RETURN40600 REM ===== handle "cursor up"40610 IF CURY% > 1 THEN CURY% = CURY% - 140620 GOSUB 4000040630 RETURN40700 REM ===== handle "cursor left"40710 IF CURWORD% > 0 THEN IF CURSIDE% = 0 THEN CURFIELDPOS% = LWORDTOPOS%(CURWORD%, 1): GOSUB 40200 ELSE CURFIELDPOS% = RWORDTOPOS%(CURWORD%, 1): GOSUB 4020040720 IF CURX% > 1 THEN CURX% = CURX% - 1 ELSE IF CURSIDE% = 1 THEN CURSIDE% = 0: CURX% = 1240730 GOSUB 4000040740 RETURN40800 REM ===== handle "cursor right"40810 IF CURWORD% > 0 THEN IF CURSIDE% = 0 THEN CURFIELDPOS% = LWORDTOPOS%(CURWORD%, WORDLENGTH%): GOSUB 40200 ELSE CURFIELDPOS% = RWORDTOPOS%(CURWORD%, WORDLENGTH%): GOSUB 4020040820 IF CURX% < 12 THEN CURX% = CURX% + 1 ELSE IF CURSIDE% = 0 THEN CURSIDE% = 1: CURX% = 140830 GOSUB 4000040840 RETURN41000 REM ===== fill a two-dimensional array with lists of "print @" locations for LSIDE41010 RAWPOS% = LSIDEPOS%(I)41020 CURROW% = INT(RAWPOS% / 12) + 741030 CURCOL% = (RAWPOS% - INT(RAWPOS% / 12) * 12)41035 IF CURCOL% = 0 THEN CURCOL% = 12: CURROW% = CURROW% - 141040 FOR J = 1 TO WORDLENGTH%41050   PAPOSITIONS%(I, J) = (CURROW% * 80) + 6 + CURCOL%41060   CURCOL% = CURCOL% + 141070   IF CURCOL% > 12 THEN CURCOL% = 1: CURROW% = CURROW% + 141080 NEXT J41090 RETURN42000 REM ===== fill a two-dimensional array with lists of "print @" locations for RSIDE42010 RAWPOS% = RSIDEPOS%(I)42020 CURROW% = INT(RAWPOS% / 12) + 742030 CURCOL% = (RAWPOS% - INT(RAWPOS% / 12) * 12)42035 IF CURCOL% = 0 THEN CURCOL% = 12: CURROW% = CURROW% - 142040 FOR J = 1 TO WORDLENGTH%42050   PAPOSITIONS%(I, J) = (CURROW% * 80) + 26 + CURCOL%42060   CURCOL% = CURCOL% + 142070   IF CURCOL% > 12 THEN CURCOL% = 1: CURROW% = CURROW% + 142080 NEXT J42090 RETURN43000 REM ===== highlight the word pointed to by CURWORD% and put it lower-right43010 PALOC = ((TOPROW + 15) * 80) + 4243020 PRINT @ PALOC, STRING$(15, " ");: ' "15" should be max possible wordlength + 143030 FOR J = 1 TO WORDLENGTH%43040   PRINT @ PAPOSITIONS%(CURWORD%, J), CHR$(16) + MID$(WORDS$(CURWORD%), J, 1) + CHR$(17);43050   PRINT @ PALOC, MID$(WORDS$(CURWORD%), J, 1);43060   PALOC = PALOC + 143070 NEXT J43080 PRINT @ PALOC, CHR$(16); " "; CHR$(17); CHR$(24);: ' DRY this up with 49040 maaaybe?43090 RETURN44000 REM ===== UN-highlight the word pointed to by CURWORD%44005 IF CURWORD% <= 0 THEN RETURN44010 FOR J = 1 TO WORDLENGTH%44020   PRINT @ PAPOSITIONS%(CURWORD%, J), MID$(WORDS$(CURWORD%), J, 1);44030 NEXT J44040 RETURN45000 REM ===== Highlight a single character and clear any selected word45010 PRINT @ CURPALOC%, CHR$(16); CURCHAR$; CHR$(17); CHR$(24);45020 GUESS$ = CURCHAR$45030 GOSUB 4400045040 CURWORD% = 045050 GOSUB 4904045060 RETURN46000 REM ===== Detect nuggets, make sure they're not already used, highlight them46005 GOSUB 44000: ' unhighlight the last word we were on46010 IF CURSIDE% = 0 THEN TESTWORD% = LPOSTOWORD%(CURFIELDPOS%) ELSE TESTWORD% = RPOSTOWORD%(CURFIELDPOS%)46020 IF TESTWORD% = -1 THEN GOSUB 45000: RETURN: ' We have used this nugget already46025 IF (CURFIELDPOS% - (INT(CURFIELDPOS% / 12) * 12)) = 0 THEN GOSUB 45000: RETURN:' started at EOL, bail out46030 INCRX% = 1: TESTNUGG$ = CURCHAR$46040 NUGGETPOS% = CURFIELDPOS% + INCRX%46050 IF (NUGGETPOS% - (INT(NUGGETPOS% / 12) * 12)) = 0 THEN GOSUB 45000: RETURN:' hit EOL, bail out46060 IF CURSIDE% = 0 THEN TESTCHAR$ = MID$(LSIDE$, NUGGETPOS%, 1) ELSE TESTCHAR$ = MID$(RSIDE$, NUGGETPOS%, 1)46070 IF TESTCHAR$ = ENDCHAR$ THEN TESTNUGG$ = TESTNUGG$ + TESTCHAR$: GOSUB 46500 : RETURN: ' found end marker, append, highlight nugget46080 IF ASC(TESTCHAR$) >= 65 THEN IF ASC(TESTCHAR$) <= 90 THEN GOSUB 45000: RETURN: ' hit a letter, bail out46090 TESTNUGG$ = TESTNUGG$ + TESTCHAR$: ' OK, add the character and move to the next one46100 INCRX% = INCRX% + 146110 GOTO 4604046500 REM ===== Highlight detected nugget, push it into GUESS, update lower-right prompt46510 GUESS$ = TESTNUGG$: GUESSISNUGGET% = 146520 PRINT @ CURPALOC%, CHR$(16);GUESS$;CHR$(17);46530 GOSUB 4904046540 RETURN47000 REM ===== print remaining-guesses line47010 PRINT @ 400, "Attempts Remaining: ";47020 FOR J = 1 TO 447025   PALOC = 417 + (J * 2)47030   IF J <= GUESSES% THEN PRINT @ PALOC, " " ; CHR$(16) ; " " ; CHR$(17); ELSE PRINT @ PALOC, "  ";47040 NEXT J47050 RETURN48000 REM ===== rotate / push the "stack" of right-hand output lines48010 FOR J = 15 TO 2 STEP -148020   OUTPUTLINES$(J) = OUTPUTLINES$(J-1)48030 NEXT J48040 OUTPUTLINES$(1) = NEWLINE$48050 RETURN49000 REM ===== print the right-hand lines and the prompt49010 FOR J = 1 TO 1549015   PALOC = ((22 - J) * 80) + 4149020   IF OUTPUTLINES$(J) <> "" THEN PRINT @ PALOC, OUTPUTLINES$(J);STRING$(15 - LEN(OUTPUTLINES$(J)), " ");49030 NEXT49040 REM ===== sometimes we GOSUB into the middle, here, if we just want to print the prompt49050 PALOC = 22*80 + 4149060 PRINT @ PALOC, ">               ";: ' clear the line, then:49070 PRINT @ PALOC, ">" ; GUESS$; CHR$(16); " "; CHR$(17); CHR$(24);: ' drop the cursor in the right place49090 RETURN50000 REM ===== process a guess50010 IF CURWORD% = PASSWORDIDX% THEN PALOC = 22*80 + 41 + WORDLENGTH% + 1: PRINT @ PALOC, " ": PRINT"YOU WIN!": END50020 GUESS$ = WORDS$(CURWORD%)50030 MATCHES% = 050040 FOR J = 1 TO LEN(GUESS$)50050   IF MID$(GUESS$, J, 1) = MID$(PASSWORD$, J, 1) THEN MATCHES% = MATCHES% + 150060 NEXT J50070 NEWLINE$ = ">" + GUESS$50080 GOSUB 4800050090 NEWLINE$ = ">Entry denied."50100 GOSUB 4800050110 NEWLINE$ = ">Likeness=" + RIGHT$(STR$(MATCHES%), 1)50120 GOSUB 4800050130 GOSUB 49000: ' print the lines50150 GUESSES% = GUESSES% - 150160 GOSUB 47000: ' Decrement guesses blocks50170 GOSUB 49040: ' repoint the cursor to bottom right50180 IF GUESSES% = 0 THEN PALOC = 22*80 + 41 + WORDLENGTH% + 1: PRINT @ PALOC, " ": PRINT"OUT OF GUESSES!  PASSWORD WAS: " ; PASSWORD$: END50190 RETURN51000 REM ===== process a nugget51010 NEWLINE$ = ">" + GUESS$51020 GOSUB 48000: ' push line onto stack51030 PRINT @ CURPALOC%, GUESS$;: ' un-highlight the nugget51040 PRINT @ CURPALOC%, CHR$(16);CURCHAR$;CHR$(17);: ' re-highlight the current position51045 IF CURSIDE% = 0 THEN LPOSTOWORD%(CURFIELDPOS%) = -1 ELSE RPOSTOWORD%(CURFIELDPOS%) = -1: ' tag this nugget as used51050 IF RND(5) = 5 THEN GOSUB 52000 ELSE GOSUB 53000: ' 20% chance of replenish guesses vs 80% remove dud51060 GUESSISNUGGET% = 051070 GUESS$ = CURCHAR$51080 CURWORD% = -151090 GOSUB 49040: ' reprint the prompt with just the one character51100 RETURN51500 REM ===== "Error" on retrying existing nugget51510 NEWLINE$ = ">" + GUESS$51520 GOSUB 48000: ' push line onto stack51530 NEWLINE$ = ">Error."51540 GOSUB 48000: ' push line onto stack51550 GOSUB 49000: ' print the right-side lines and re-prompt51560 RETURN52000 REM ===== Replenish guesses52010 NEWLINE$ = ">Tries reset."52020 GOSUB 48000: ' push line onto stack52060 GUESSES% = MAXGUESSES%52070 GOSUB 47000: ' reprint guesses-left boxes52080 GUESS$ = CURCHAR$52090 GOSUB 49000: ' print the right-side lines and prompt52110 RETURN53000 REM ===== Remove a dud53010 DUD% = RND(WORDLISTLENGTH%): IF DUD% = PASSWORDIDX% THEN 53010 ELSE IF WORDS$(DUD%) = DUD$ THEN 5301053020 WORDS$(DUD%) = DUD$53025 IF RSIDEPOS%(DUD%) > 0 THEN MID$(RSIDE$, RSIDEPOS%(DUD%),WORDLENGTH%) = DUD$ ELSE MID$(LSIDE$, LSIDEPOS%(DUD%),WORDLENGTH%) = DUD$53030 OLDCURWORD% = CURWORD%53040 CURWORD% = DUD%53050 GOSUB 44000: ' un-highlight (and therefore re-display the now-DUD$) current word53060 CURWORD% = OLDCURWORD%53070 NEWLINE$ = ">Dud removed."53080 GOSUB 48000: ' push line onto stack53090 GOSUB 49000: ' reprint right-side lines and prompt59999 RETURN60000 REM ===== IMPORT WORD LIST - GOTO the correct word-length entry point60010 WORDLISTCOUNT% = 860020 ON DIFFICULTY% GOTO 60030,60050,60070,60090,6011060030 ON RND(WORDLISTCOUNT%) GOSUB 61010,61040,61070,61100,61130,61160,61190,61220: ' four-letter lists60040 GOTO 6050060050 ON RND(WORDLISTCOUNT%) GOSUB 61260,61290,61320,61350,61380,61410,61440,61470: ' five-letter lists60060 GOTO 6050060070 ON RND(WORDLISTCOUNT%) GOSUB 61510,61540,61570,61600,61630,61660,61690,61620: ' six-letter lists60080 GOTO 6050060090 ON RND(WORDLISTCOUNT%) GOSUB 61000,61100,61200,61300,61400,61500,61600,61700: ' seven-letter lists60100 GOTO 6050060110 ON RND(WORDLISTCOUNT%) GOSUB 61000,61100,61200,61300,61400,61500,61600,61700: ' eight-letter lists60120 GOTO 6050060500 REM ===== DATA selected, import the DATA into WORDS$()60510 READ WORDLISTLENGTH%60520 DIM WORDS$(WORDLISTLENGTH%)60530 ROTATOR% = RND(WORDLISTLENGTH%)60540 FOR J = 1 TO WORDLISTLENGTH%60550   LISTIDX% = J + ROTATOR%: IF LISTIDX% > WORDLISTLENGTH% THEN LISTIDX% = LISTIDX% - WORDLISTLENGTH%60560   READ WORDS$(LISTIDX%)60570 NEXT J60580 RETURN61000 REM ===== FOUR-LETTER WORD LISTS61010 RESTORE 6102061020 DATA 18,POST,TALE,BELT,PLOT,SETS,JOIN,GATE,GAIN,EARN,PAID,SLID,NOTE,TALK,FOLD,WAKE,CASE,SIDE,WANE61030 RETURN61040 RESTORE 6105061050 DATA 18,BUSY,SASH,DAIS,DEEP,SOUL,BEAM,LAKE,EACH,BEEN,FEET,IDEA,DECK,RAID,FULL,NEXT,SORT,SHOP,RELY61060 RETURN61070 RESTORE 6108061080 DATA 18,SAME,HUGE,WALK,POST,SALT,CORN,IRON,GAIN,CODE,SHOT,RATE,SKIN,NAIL,WORD,HAIR,RARE,CARE,PAYS61090 RETURN61100 RESTORE 6111061110 DATA 18,SEND,CORE,MATE,GANG,DANK,GAVE,FOOD,GRAY,BONE,MAZE,SLUM,GLOW,SLID,CASE,SURE,DONE,SUNG,ABLE61120 RETURN61130 RESTORE 6114061140 DATA 18,CURE,PETS,MAKE,HUTS,WHEN,BEEN,JUST,HOME,GAME,SEEM,TILE,TARP,LAKE,TURN,EARN,PAIN,THIN,EYES61150 RETURN61160 RESTORE 6117061170 DATA 18,SAND,NEAR,TEST,RATS,LAKE,EGOS,DUEL,LIES,ARMS,TALE,WEST,PUSH,FUSE,CAGE,TRAP,TYPE,LESS,BUNK61180 RETURN61190 RESTORE 6119061200 DATA 18,PICK,CAGE,WARD,WOOD,CITY,WEAK,FIRE,HIGH,PETS,WERE,FIVE,SEEK,HERO,RUSE,NEWS,MASS,BALL,CORE61210 RETURN61220 RESTORE 6123061230 DATA 18,ADDS,PATH,TALK,CALL,MANY,MAKE,POLE,PUSH,PANS,DENY,SETS,MAZE,BOSS,GUTS,COST,DUTY,PETS,ROLL61240 RETURN61250 REM ===== FIVE-LETTER WORD LISTS61260 RESTORE 6127061270 DATA 18,HIRED,PULLS,CLAWS,HILLS,CELLS,WORKS,TILES,HOLES,SANDS,RUMOR,SIDES,KINDS,SURGE,SENSE,HEART,JAMES,RAIDS,CRIED61280 RETURN61290 RESTORE 6130061300 DATA 18,BLAST,SPANS,DEMON,SWEPT,LIGHT,DEITY,TRIED,THROW,DIARY,LEVEL,TELLS,SPREE,LOVED,LISTS,HALLS,WIRES,RIVAl,MAKES61310 RETURN61320 RESTORE 6133061330 DATA 18,CANDY,MODEL,DRIED,IDEAS,SHEER,STAKE,HOLDS,RANGE,UPSET,LORDS,EAGER,STERN,RIVAL,CRUDE,SPEAR,TRACT,HORDE,FRUIT61340 RETURN61350 RESTORE 6136061360 DATA 18,FLASH,VALUE,CLOUD,CRUDE,TRIPS,BLEND,LOVES,ALLOW,HORDE,REPEL,LEAST,SPANS,MEATS,HOPES,CODES,OASIS,LIVES,BOOST61370 RETURN61380 RESTORE 6139061390 DATA 18,FARMS,FACES,EARLY,HIDES,QUEST,BUILD,CARDS,FLUID,HOWLS,CASES,TYPED,TAKES,BOOKS,ENEMY,TANKS,HOLDS,WIRES,MAKES61400 RETURN61410 RESTORE 6142061420 DATA 18,DRAWN,LEAVE,HENCE,CLEAN,SPEND,ROCKY,PARTY,CANDY,CACHE,LOOMS,PLACE,CLOCK,AGREE,PICKS,GUARD,HOLDS,VENOM,PRONE61430 RETURN61440 RESTORE 6145061450 DATA 18,DARED,LIGHT,LASER,FOYER,LUCKY,TEAMS,THIEF,BOOTS,POWER,HANDS,TOXIC,TYPES,NEVER,MOVED,ROCKY,TIRED,HAVEN,TYPED61460 RETURN61470 RESTORE 6148061480 DATA 18,CAUSE,SEVER,WROTE,SINCE,LUCKY,GOODS,LEAST,SEEMS,NEARS,AGAIN,TRASH,LASER,TELLS,WORDS,SEEDS,LANDS,CLUMP,ROOMS61490 RETURN61500 REM ===== SIX-LETTER WORD LISTS61510 RESTORE 6152061520 DATA 18,DEMEAN,BUNKER,PROVED,THOUGH,ARGUED,HACKER,PREFER,MINUTE,WISHES,DAGGER,CHASED,BOOTHS,DIPPED,SIRENS,FENDED,GRUNTS,POINTS,PLEADS61530 RETURN61540 RESTORE 6155061550 DATA 18,GEIGER,MOSTLY,PATROL,BACKED,WANTED,CARVED,BREWER,MONGOL,BITTEN,LATEST,SUDDEN,PISTOL,ATTEND,MENIAL,BOTTLE,KATANA,PALACE,FATHER61560 RETURN61570 RESTORE 6158061580 DATA 18,VISION,PROPER,JUSTIN,BETTER,PLENTY,ANSWER,MANNED,DENIES,FIERCE,FILTHY,FILLED,SLAVES,DEFEND,BOTTOM,CENTER,FEARED,SIRENS,ROCKET61590 RETURN61600 RESTORE 6161061610 DATA 18,WEAKEN,KATANA,SQUARE,JACKET,TONGUE,SYSTEM,INTACT,MELTED,GENTLY,GLANCE,LEADER,NAILED,OPENLY,AFRAID,SONICS,SUDDEN,TAUNTS,RANGER61620 RETURN61630 RESTORE 6164061640 DATA 18,WINTER,BROKEN,MODELS,EASIER,SPEARS,DEMEAN,GEIGER,UPROAR,KISSED,CREATE,STUFFS,CHOICE,SENSED,STONES,PLAYER,SWORDS,BELONG,SCARED61650 RETURN61660 RESTORE 6167061670 DATA 18,PREFER,CRIMES,CRAVEN,LOSING,REOPEN,MODELS,FORCES,LIGHTS,WEAPON,RADIOS,RESULT,CAUSED,FLOORS,KATANA,BEFELL,BEHIND,HEATED,GLADLY61680 RETURN61690 RESTORE 6170061700 DATA 18,BROKEN,WANDER,FLUENT,LEADER,GARDEN,TUNNEL,JACKAL,INSULT,JACKET,FACING,LOCALS,BORDER,SECRET,KNIGHT,PRISON,LOCKED,POISED,SUDDEN61710 RETURN61720 RESTORE 6173061730 DATA 18,WILDLY,SHOVEL,RUSTED,WANTED,BOOTED,LOCALS,SHELLS,HUNTED,NEARBY,HEALED,FORCES,NORMAL,CRATES,BORDER,BARBED,GLADLY,BOTHER,FONDLY61740 RETURN