1 REM vim: ft=basic10 CLEAR 2048 : RANDOM20 GUESSES% = 430 GOSUB 60000: ' Populate the word list40 WORDLENGTH% = LEN(WORDS$(1))50 PASSWORDIDX% = RND(WORDLISTLENGTH%)60 PASSWORD$ = WORDS$(PASSWORDIDX%)70 CURRWORD% = 080 DIM OUTPUTLINES$(15): ' 15 lines because the bottom one we always do dynamically90 DIM PAPOSITIONS%(WORDLISTLENGTH%,WORDLENGTH%): ' (number of words, length)100 DIM LPOSTOWORD%(12*16)110 DIM RPOSTOWORD%(12*16)120 HEXADDRESS! = RND(32767-4096) + RND(32767) + 4096: IF HEXADDRESS! > 32767 THEN HEXADDRESS! = HEXADDRESS! - 65536130 GUESSISNUGGET% = 0500 CLS510 PRINT520 PRINT "Welcome to ROBCO Industries (TM) Termlink"530 PRINT540 PRINT "Password Required"550 PRINT560 PRINT CHR$(16); " "; CHR$(17); CHR$(24);1000 REM ===== set up the vars representing the left and right text fields1010 REM GARBAGECHARS$ contains double of most things to make []{}()<> less likely1020 GARBAGECHARS$ =  "/\%@#$%^&*-=+,.:;?_/\%@#$%^&*-=+,.:;?_[]{}()<> "1050 FOR I = 1 TO 501060   NEWCHAR$ = MID$(GARBAGECHARS$, RND(LEN(GARBAGECHARS$)), 1)1070   IF NEWCHAR$ = LASTLCHAR$ THEN 1060 ELSE LASTLCHAR$ = NEWCHAR$1080   LSIDE$ = LSIDE$ + NEWCHAR$1090 NEXT1100 LSIDE$ = LSIDE$ + LSIDE$ + LSIDE$ + LEFT$(LSIDE$, 42)1110 RSIDE$ = RIGHT$(LSIDE$, 32) + LEFT$(LSIDE$, 160)1300 REM ===== add nuggets explicitly, just sprinkle some of them in there and let them land where they may.1310 FOR I = 13 TO 11*16 STEP 161320   I = I + RND(11) - 5: ' randomize locations a little1330   NUGGSIDE% = 01340   NUGGIDX% = RND(4)1350   NEWNUGGET$ = MID$("[{<(",NUGGIDX%,1) + MID$(LSIDE$, RND(LEN(LSIDE$)), RND(5)-1) + MID$("]}>)",NUGGIDX%,1)1360   IF NUGGSIDE% = 0 THEN MID$(LSIDE$, I, LEN(NEWNUGGET$)) = NEWNUGGET$ ELSE MID$(RSIDE$, I, LEN(NEWNUGGET$)) = NEWNUGGET$1370   NUGGSIDE% = 1 - NUGGSIDE%1380 NEXT I1500 REM ===== sprinkle the words into the text fields1510 RSIDEWORDCOUNT% = INT(WORDLISTLENGTH% / 2)1520 LSIDEWORDCOUNT% = WORDLISTLENGTH% - RSIDEWORDCOUNT%1530 LCELLLENGTH% = INT((12*16) / LSIDEWORDCOUNT%)1540 RCELLLENGTH% = INT((12*16) / RSIDEWORDCOUNT%)1550 DIM LSIDEPOS%(LSIDEWORDCOUNT%), RSIDEPOS%(RSIDEWORDCOUNT%)1560 REM the math here is (move over X cells) + (middle of cell) - (center the word) + (randomize a bit)1570 FOR I = 1 TO LSIDEWORDCOUNT%1580   LSIDEPOS%(I) = (LCELLLENGTH% * (I-1)) + INT(LCELLLENGTH% / 2) - INT(LEN(WORDS$(I)) / 2) + (RND(7) - 4)1590   FOR J = 1 TO WORDLENGTH%1600     MID$(LSIDE$, LSIDEPOS%(I)+J-1, 1) = MID$(WORDS$(I), J, 1)1610     LPOSTOWORD%(LSIDEPOS%(I)+J-1) = I1620   NEXT J1630   GOSUB 410001640 NEXT I1650 FOR I = 1 TO RSIDEWORDCOUNT%1660   RSIDEPOS%(I) = (RCELLLENGTH% * (I-1)) + INT(RCELLLENGTH% / 2) - INT(LEN(WORDS$(I)) / 2) + (RND(7) - 4)1670   MID$(RSIDE$, RSIDEPOS%(I), WORDLENGTH%) = WORDS$(I+LSIDEWORDCOUNT%)1680   FOR J = 1 TO WORDLENGTH%1690     RPOSTOWORD%(RSIDEPOS%(I)+J-1) = I+LSIDEWORDCOUNT%1700   NEXT J1710   GOSUB 420001720 NEXT I10000 REM ===== print the text fields at the right place10005 PRINT @ 400, " ";10010 TOPROW = 710020 FOR I = 0 TO 1510030   PALOC = (TOPROW + I) * 8010040   PRINT @ PALOC, "0x" ; HEX$(HEXADDRESS!) ; " " ; MID$(LSIDE$, I*12 + 1, 12) ; " 0x" ; HEX$(HEXADDRESS! + (12*16)) ; " " ; MID$(RSIDE$, I*12 + 1, 12);10050   HEXADDRESS! = HEXADDRESS! + 1210060 NEXT I10070 GOSUB 47000: ' print attempts remaining10080 GOSUB 49040: ' print the prompt20000 REM ===== Set up the initial cursor location20010 CURX% = 1: CURY% = 1: CURSIDE% = 0: ' CURSIDE% 0 = LEFT, 1 = RIGHT20020 GOSUB 4000021000 REM ===== Do the input loop and dispatch appropriately21010 KEYIN$ = INKEY$: IF KEYIN$ = "" THEN 2101021020 IF KEYIN$ = CHR$(8)  THEN GOSUB 40700: GOTO 21010 ELSE IF KEYIN$ = "h" THEN GOSUB 40700: GOTO 2101021030 IF KEYIN$ = CHR$(9)  THEN GOSUB 40800: GOTO 21010 ELSE IF KEYIN$ = "l" THEN GOSUB 40800: GOTO 2101021040 IF KEYIN$ = CHR$(10) THEN GOSUB 40500: GOTO 21010 ELSE IF KEYIN$ = "j" THEN GOSUB 40500: GOTO 2101021050 IF KEYIN$ = CHR$(11) THEN GOSUB 40600: GOTO 21010 ELSE IF KEYIN$ = "k" THEN GOSUB 40600: GOTO 2101021060 IF KEYIN$ = CHR$(13) THEN IF GUESSISNUGGET% = 1 THEN GOSUB 51000 ELSE IF CURRWORD% > 0 THEN GOSUB 5000021999 GOTO 2101039999 END40000 REM ===== sub to DTRT with the current cursor location40003 REM print our current thingie before we change around where CURPALOC points40005 IF GUESSISNUGGET% = 1 THEN PRINT @ CURPALOC%, GUESS$;: GUESSISNUGGET% = 0 ELSE PRINT @ CURPALOC%, CURCHAR$;40010 IF CURSIDE% = 0 THEN CURPALOC% = (CURY%+6)*80 + 6 + CURX% ELSE CURPALOC% = (CURY%+6)*80 + 26 + CURX%40020 CURFIELDPOS% = (CURY%-1) * 12 + CURX%40030 IF CURSIDE% = 0 THEN CURCHAR$ = MID$(LSIDE$, CURFIELDPOS%, 1) ELSE CURCHAR$ = MID$(RSIDE$, CURFIELDPOS%, 1)40040 IF CURCHAR$ = "{" THEN ENDCHAR$ = "}": GOSUB 46000: RETURN40050 IF CURCHAR$ = "[" THEN ENDCHAR$ = "]": GOSUB 46000: RETURN40060 IF CURCHAR$ = "<" THEN ENDCHAR$ = ">": GOSUB 46000: RETURN40070 IF CURCHAR$ = "(" THEN ENDCHAR$ = ")": GOSUB 46000: RETURN40080 IF ASC(CURCHAR$) < 65 THEN GOSUB 45000: RETURN ELSE IF ASC(CURCHAR$) > 90 THEN GOSUB 45000: RETURN40090 IF CURSIDE% = 0 THEN CHECKWORD% = LPOSTOWORD%(CURFIELDPOS%) ELSE CHECKWORD% = RPOSTOWORD%(CURFIELDPOS%)40100 IF CHECKWORD% <> 0 THEN GOSUB 44000: CURRWORD% = CHECKWORD%: GOSUB 4300040110 RETURN40500 REM ===== handle "cursor down"40505 REM TODO - check actual game to see how the cursor works at all edges of fields40520 IF CURY% < 16 THEN CURY% = CURY% + 1 ELSE IF CURSIDE% = 0 THEN CURSIDE% = 1: CURY% = 140530 GOSUB 4000040540 RETURN40600 REM ===== handle "cursor up"40620 IF CURY% > 1 THEN CURY% = CURY% - 1 ELSE IF CURSIDE% = 1 THEN CURSIDE% = 0: CURY% = 1640630 GOSUB 4000040640 RETURN40700 REM ===== handle "cursor left"40720 IF CURX% > 1 THEN CURX% = CURX% - 1 ELSE IF CURSIDE% = 1 THEN CURSIDE% = 0: CURX% = 1240730 GOSUB 4000040740 RETURN40800 REM ===== handle "cursor right"40820 IF CURX% < 12 THEN CURX% = CURX% + 1 ELSE IF CURSIDE% = 0 THEN CURSIDE% = 1: CURX% = 140830 GOSUB 4000040840 RETURN41000 REM ===== fill a two-dimensional array with lists of "print @" locations for LSIDE41010 RAWPOS% = LSIDEPOS%(I)41020 CURROW% = INT(RAWPOS% / 12) + 741030 CURCOL% = (RAWPOS% - INT(RAWPOS% / 12) * 12)41035 IF CURCOL% = 0 THEN CURCOL% = 12: CURROW% = CURROW% - 141040 FOR J = 1 TO WORDLENGTH%41050   PAPOSITIONS%(I, J) = (CURROW% * 80) + 6 + CURCOL%41060   CURCOL% = CURCOL% + 141070   IF CURCOL% > 12 THEN CURCOL% = 1: CURROW% = CURROW% + 141080 NEXT J41090 RETURN42000 REM ===== fill a two-dimensional array with lists of "print @" locations for RSIDE42010 RAWPOS% = RSIDEPOS%(I)42020 CURROW% = INT(RAWPOS% / 12) + 742030 CURCOL% = (RAWPOS% - INT(RAWPOS% / 12) * 12)42035 IF CURCOL% = 0 THEN CURCOL% = 12: CURROW% = CURROW% - 142040 FOR J = 1 TO WORDLENGTH%42050   PAPOSITIONS%(I+LSIDEWORDCOUNT%, J) = (CURROW% * 80) + 26 + CURCOL%42060   CURCOL% = CURCOL% + 142070   IF CURCOL% > 12 THEN CURCOL% = 1: CURROW% = CURROW% + 142080 NEXT J42090 RETURN43000 REM ===== highlight the word pointed to by CURRWORD% and put it lower-right43010 PALOC = ((TOPROW + 15) * 80) + 4243020 PRINT @ PALOC, STRING$(15, " ");: ' "15" should be max possible wordlength + 143030 FOR J = 1 TO WORDLENGTH%43040   PRINT @ PAPOSITIONS%(CURRWORD%, J), CHR$(16) + MID$(WORDS$(CURRWORD%), J, 1) + CHR$(17);43050   PRINT @ PALOC, MID$(WORDS$(CURRWORD%), J, 1);43060   PALOC = PALOC + 143070 NEXT J43080 PRINT @ PALOC, CHR$(16); " "; CHR$(17); CHR$(24);: ' DRY this up with 49040 maaaybe?43090 RETURN44000 REM ===== UN-highlight the word pointed to by CURRWORD%44010 FOR J = 1 TO WORDLENGTH%44020   PRINT @ PAPOSITIONS%(CURRWORD%, J), MID$(WORDS$(CURRWORD%), J, 1);44030 NEXT J44040 RETURN45000 REM ===== Highlight a single character and clear any selected word45010 PRINT @ CURPALOC%, CHR$(16); CURCHAR$; CHR$(17); CHR$(24);45020 GUESS$ = CURCHAR$45030 GOSUB 4400045040 CURRWORD% = 045050 GOSUB 4904045060 RETURN46000 REM ===== Detect nuggets, make sure they're not already used, highlight them46005 GOSUB 44000: ' unhighlight the last word we were on46010 IF CURSIDE% = 0 THEN TESTWORD% = LPOSTOWORD%(CURFIELDPOS%) ELSE TESTWORD% = RPOSTOWORD%(CURFIELDPOS%)46020 IF TESTWORD% = -1 THEN GOSUB 45000: RETURN: ' We have used this nugget already46030 IF CURSIDE% = 0 THEN TESTCHARS$ = MID$(LSIDE$, CURFIELDPOS%, 13-CURX%) ELSE TESTCHARS$ = MID$(RSIDE$, CURFIELDPOS%, 13-CURX%)46040 FOR J = 1 TO LEN(TESTCHARS$)46050   IF GUESSISNUGGET% = 0 THEN IF MID$(TESTCHARS$, J, 1) = ENDCHAR$ THEN GOSUB 4650046060 NEXT J46070 IF GUESSISNUGGET% = 0 THEN GOSUB 4500046080 RETURN46500 REM ===== Highlight detected nugget, push it into GUESS, update lower-right prompt46510 GUESS$ = LEFT$(TESTCHARS$, J): GUESSISNUGGET% = 146520 PRINT @ CURPALOC%, CHR$(16);GUESS$;CHR$(17);46530 GOSUB 4904046540 RETURN47000 REM ===== print remaining-guesses line47010 PRINT @ 400, "Attempts Remaining: ";47020 FOR J = 1 TO 447025   PALOC = 417 + (J * 2)47030   IF J <= GUESSES% THEN PRINT @ PALOC, " " ; CHR$(16) ; " " ; CHR$(17); ELSE PRINT @ PALOC, "  ";47040 NEXT J47050 RETURN48000 REM ===== rotate / push the "stack" of right-hand output lines48010 FOR J = 15 TO 2 STEP -148020   OUTPUTLINES$(J) = OUTPUTLINES$(J-1)48030 NEXT J48040 OUTPUTLINES$(1) = NEWLINE$48050 RETURN49000 REM ===== print the right-hand lines and the prompt49010 FOR J = 1 TO 1549015   PALOC = ((22 - J) * 80) + 4149020   IF OUTPUTLINES$(J) <> "" THEN PRINT @ PALOC, OUTPUTLINES$(J);STRING$(15 - LEN(OUTPUTLINES$(J)), " ");49030 NEXT49040 REM ===== sometimes we GOSUB into the middle, here, if we just want to print the prompt49050 PALOC = 22*80 + 4149060 PRINT @ PALOC, ">               ";: ' clear the line, then:49070 PRINT @ PALOC, ">" ; GUESS$; CHR$(16); " "; CHR$(17); CHR$(24);: ' drop the cursor in the right place49090 RETURN50000 REM ===== process a guess50010 IF CURRWORD% = PASSWORDIDX% THEN PALOC = 22*80 + 41 + WORDLENGTH% + 1: PRINT @ PALOC, " ": PRINT"YOU WIN!": END50020 GUESS$ = WORDS$(CURRWORD%)50030 MATCHES% = 050040 FOR J = 1 TO LEN(GUESS$)50050   IF MID$(GUESS$, J, 1) = MID$(PASSWORD$, J, 1) THEN MATCHES% = MATCHES% + 150060 NEXT J50070 NEWLINE$ = ">" + GUESS$50080 GOSUB 4800050090 NEWLINE$ = ">Entry denied."50100 GOSUB 4800050110 NEWLINE$ = ">Likeness=" + RIGHT$(STR$(MATCHES%), 1)50120 GOSUB 4800050130 GOSUB 49000: ' print the lines50150 GUESSES% = GUESSES% - 150160 GOSUB 47000: ' Decrement guesses blocks50170 GOSUB 49040: ' repoint the cursor to bottom right50180 IF GUESSES% = 0 THEN PALOC = 22*80 + 41 + WORDLENGTH% + 1: PRINT @ PALOC, " ": PRINT"OUT OF GUESSES!  PASSWORD WAS: " ; PASSWORD$: END50190 RETURN51000 REM ===== process a nugget51010 NEWLINE$ = ">" + GUESS$51020 GOSUB 48000: ' push line onto stack51030 PRINT @ CURPALOC%, GUESS$;: ' un-highlight the nugget51040 PRINT @ CURPALOC%, CHR$(16);CURCHAR$;CHR$(17);: ' re-highlight the current position51050 IF RND(10) <= 10 THEN GOSUB 52000 ELSE GOSUB 5300051060 RETURN52000 REM ===== Replenish guesses52010 NEWLINE$ = ">Allowance"52020 GOSUB 48000: ' push line onto stack52030 NEWLINE$ = ">replenished."52040 GOSUB 48000: ' push line onto stack52060 GUESSES% = 452070 GOSUB 47000: ' reprint guesses-left boxes52080 GUESS$ = CURCHAR$52090 GOSUB 49000: ' print the right-side lines and prompt52100 IF CURSIDE = 0 THEN LPOSTOWORD%(CURFIELDPOS%) = -1 ELSE RPOSTOWORD%(CURFIELDPOS%) = -1: ' tag this nugget as used52110 RETURN53000 REM ===== Remove a dud59999 RETURN60000 REM ===== IMPORT WORD LIST60010 WORDLISTCOUNT% = 5: ' the number of word lists60020 ON RND(WORDLISTCOUNT%) GOSUB 61000,61100,61200,61300,61400: ' Set up the DATA60030 READ WORDLISTLENGTH%60040 DIM WORDS$(WORDLISTLENGTH%)60050 ROTATOR% = RND(WORDLISTLENGTH%)60060 FOR J = 1 TO WORDLISTLENGTH%60070   WORDIDX% = J + ROTATOR%60080   IF WORDIDX% > WORDLISTLENGTH% THEN WORDIDX% = WORDIDX% - WORDLISTLENGTH%60090   READ WORDS$(WORDIDX%)60100 NEXT J60110 RETURN61000 REM ===== WORD LISTS, each list begins with a number representing the length of the list61010 RESTORE 6102061020 DATA 15,TAKES,KNOWN,KICKS,STARK,BOOTS,BATON,CLEAR,CRIME,WASTE,CLOSE,SWORD,SLAVE,FARGO,MAYBE,MALES61030 RETURN61100 RESTORE 6111061110 DATA 15,RANGE,REINS,EQUAL,MEANS,PENAL,JUDGE,STATE,MINUS,PRANK,WORRY,OUNCE,BEGUN,COVER,START,TRADE61120 RETURN61200 RESTORE 6121061210 DATA 15,PACED,EARLY,FIRST,LUCID,FRONT,HEAVY,PARTY,BADLY,BASIS,SNUFF,STUDY,QUICK,ROUND,FRIES,TRUNK61220 RETURN61300 RESTORE 6131061310 DATA 15,HEAVY,PRICE,GLARE,PEACE,UNION,ODDLY,NIGHT,DEMON,BLOAT,AWARE,HAPPY,EXTRA,MINOR,HEADS,MONTH61320 RETURN61400 RESTORE 6141061410 DATA 15,PERKY,ENVOY,ADULT,NYLON,ROCKS,SAVED,CLOSE,TRAIN,SHARE,FRESH,BASIS,TRULY,SLEEP,ENTER,RIGHT61420 RETURN